#
# django-weblog-parser v0.1
#
# Models
#

import os
from django.db import models
from django.utils.translation import ugettext as _
from weblogparser import settings



class LogFilePath(models.Model):
    """
    Allows for multiple logs to be stored in the same
    path, saving on database usage and allowing for easy
    migration of the database from one server to another.
    """

    path = models.TextField(
        unique=True,
        help_text=_("The base path for one or more log files."),
    )

    def __unicode__(self):
        return self.path




class LogFile(models.Model):
    """
    Representation of a log file.
    """

    path = models.ForeignKey(
        LogFilePath,
        help_text=_("The base path for this log file."),
    )
    filename = models.CharField(
        max_length=200,
        help_text=_("The base file name of the log file within the base path."),
    )
    fmt = models.IntegerField(
        default=settings.LOGFILE_FORMAT_COMMON,
        choices=settings.LOGFILE_FORMAT_CHOICES,
        verbose_name=_('format'),
        help_text=_("The format to which this log file conforms."),
    )

    created = models.DateTimeField(
        auto_now_add=True,
        help_text=_("When this log file was created in the database."),
    )
    modified = models.DateTimeField(
        auto_now=True,
        help_text=_("The last date/time that this log file was modified."),
    )

    parsed = models.DateTimeField(
        blank=True,
        null=True,
        help_text=_("The date/time at which this log file was completely parsed."),
    )
    errors = models.IntegerField(
        default=0,
        help_text=_("The number of errors found while parsing this log file."),
    )


    def __unicode__(self):
        return os.path.join(u'%s' % self.path, u'%s' % self.filename)




class LogEntry(models.Model):
    """
    A single web log entry from a specific log file.
    """

    log_file = models.ForeignKey(
        LogFile,
        help_text=_("The log file in which this entry was found."),
        db_index=True,
        related_name='entries',
    )
    remote_host = models.CharField(
        max_length=100,
        help_text=_("The remote host which made the request (%%h)."),
    )
    client_id = models.CharField(
        max_length=100,
        help_text=_("RFC 1413 identity of the client (%%l)."),
    )
    user_id = models.CharField(
        max_length=100,
        help_text=_("The user ID of the user requesting the document (%%u)."),
    )
    timestamp = models.DateTimeField(
        help_text=_("The date/time that the request was received (%%t)."),
        db_index=True,
    )
    request = models.TextField(
        help_text=_("The request line from the client (%%r)."),
    )
    status = models.IntegerField(
        help_text=_("The status code that the server sent back to the client (%%>s)."),
        db_index=True,
    )
    bytes_returned = models.IntegerField(
        help_text=_("The size of the object returned to the client (%%b)."),
    )
    referer = models.TextField(
        blank=True,
        null=True,
        help_text=_("The \"Referer\" HTTP request header (\\\"%%{Referer}i\\\")."),
    )
    user_agent = models.TextField(
        blank=True,
        null=True,
        help_text=_("The \"User-Agent\" HTTP request header (\\\"%%{User-Agent}i\\\")."),
        db_index=True,
    )
    session_id = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        help_text=_("The session ID, if any, depending on whether this is configured."),
        db_index=True,
    )

    # metadata parameters built up from entries
    path = models.TextField(
        blank=True,
        null=True,
        help_text=_("The path requested from the web server."),
    )
    is_robot = models.BooleanField(
        default=False,
        help_text=_("Was this request generated by some sort of robot?"),
    )
    is_page = models.BooleanField(
        default=True,
        help_text=_("Was the response most likely an HTML document?"),
    )


    class Meta:
        verbose_name = _('log entry')
        verbose_name_plural = _('log entries')


    def __unicode__(self):
        return _("Request at %(timestamp)s from %(remote)s") % {'timestamp': self.timestamp.strftime("%Y-%m-%d %H:%M:%S %z"),
            'remote': self.remote_host}
    


